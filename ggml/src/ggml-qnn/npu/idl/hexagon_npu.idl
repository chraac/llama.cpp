#include "AEEStdDef.idl"
#include "AEEStdErr.idl"
#include "remote.idl"

interface npu_device : remote_handle64{

    const uint32_t MAX_TENSOR_SRC = 2;

    enum tensor_op {
        NPU_OP_MUL_MAT,
        NPU_OP_COUNT
    };

    enum tensor_data_type {
        NPU_DATA_TYPE_F32,
        NPU_DATA_TYPE_COUNT
    };

    struct tensor_info_t {
        int64_t ne[4];
        uint64_t nb[4]; // TODO: handle dimension strides
        long buffer_fd;
        uint64_t offset;
        tensor_data_type type;
        tensor_op op;
    };

    typedef uint64_t tensor_handle_t;
    typedef uint64_t graph_handle_t;

    AEEResult device_get_alignment(
        rout uint32_t alignment
    );

    AEEResult tensor_init(
        in tensor_info_t info,
        rout tensor_handle_t tensor_handle
    );

    AEEResult tensor_set_src(
        in tensor_handle_t tensor_handle,
        in uint64_t index,
        in tensor_handle_t src
    );

    AEEResult tensor_set_op(
        in tensor_handle_t tensor_handle,
        in tensor_op op
    );

    AEEResult tensor_free(
        in tensor_handle_t tensor_handle
    );

    AEEResult graph_init(
        rout graph_handle_t graph_handle
    );

    AEEResult graph_set_tensor(
        in graph_handle_t graph_handle,
        in sequence<tensor_handle_t> tensor_handles
    );

    AEEResult graph_compute(
        in graph_handle_t graph_handle
    );

    AEEResult graph_free(
        in graph_handle_t graph_handle
    );
};
